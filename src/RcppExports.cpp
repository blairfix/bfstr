// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// count_substring
int count_substring(std::string pattern, std::string x);
RcppExport SEXP _bfstr_count_substring(SEXP patternSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type pattern(patternSEXP);
    Rcpp::traits::input_parameter< std::string >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(count_substring(pattern, x));
    return rcpp_result_gen;
END_RCPP
}
// get_words
std::list<std::string> get_words(std::string& x);
RcppExport SEXP _bfstr_get_words(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(get_words(x));
    return rcpp_result_gen;
END_RCPP
}
// rm_btw
std::string rm_btw(std::string x, char a, char b);
RcppExport SEXP _bfstr_rm_btw(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type x(xSEXP);
    Rcpp::traits::input_parameter< char >::type a(aSEXP);
    Rcpp::traits::input_parameter< char >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(rm_btw(x, a, b));
    return rcpp_result_gen;
END_RCPP
}
// string_index
Rcpp::NumericVector string_index(Rcpp::StringVector x);
RcppExport SEXP _bfstr_string_index(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(string_index(x));
    return rcpp_result_gen;
END_RCPP
}
// string_replace
std::vector<std::string> string_replace(std::vector<std::string> pattern, std::vector<std::string> replacement, std::vector<std::string> x);
RcppExport SEXP _bfstr_string_replace(SEXP patternSEXP, SEXP replacementSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type pattern(patternSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type replacement(replacementSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(string_replace(pattern, replacement, x));
    return rcpp_result_gen;
END_RCPP
}
// string_table
std::map<std::string, int> string_table(std::vector<std::string> x);
RcppExport SEXP _bfstr_string_table(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(string_table(x));
    return rcpp_result_gen;
END_RCPP
}
// vec_replace
std::vector<std::string> vec_replace(std::vector<std::string> x, std::vector<std::string> find, std::vector<std::string> replace);
RcppExport SEXP _bfstr_vec_replace(SEXP xSEXP, SEXP findSEXP, SEXP replaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type find(findSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type replace(replaceSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_replace(x, find, replace));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bfstr_count_substring", (DL_FUNC) &_bfstr_count_substring, 2},
    {"_bfstr_get_words", (DL_FUNC) &_bfstr_get_words, 1},
    {"_bfstr_rm_btw", (DL_FUNC) &_bfstr_rm_btw, 3},
    {"_bfstr_string_index", (DL_FUNC) &_bfstr_string_index, 1},
    {"_bfstr_string_replace", (DL_FUNC) &_bfstr_string_replace, 3},
    {"_bfstr_string_table", (DL_FUNC) &_bfstr_string_table, 1},
    {"_bfstr_vec_replace", (DL_FUNC) &_bfstr_vec_replace, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_bfstr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
